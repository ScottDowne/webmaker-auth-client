(function(){"use strict";function t(){}function r(t,n){for(var e=t.length;e--;)if(t[e].listener===n)return e;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var e=t.prototype,i=this,s=i.EventEmitter;e.getListeners=function(n){var r,e,t=this._getEvents();if(n instanceof RegExp){r={};for(e in t)t.hasOwnProperty(e)&&n.test(e)&&(r[e]=t[e])}else r=t[n]||(t[n]=[]);return r},e.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},e.getListenersAsObject=function(n){var e,t=this.getListeners(n);return t instanceof Array&&(e={},e[n]=t),e||t},e.addListener=function(i,e){var t,n=this.getListenersAsObject(i),s="object"==typeof e;for(t in n)n.hasOwnProperty(t)&&-1===r(n[t],e)&&n[t].push(s?e:{listener:e,once:!1});return this},e.on=n("addListener"),e.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},e.once=n("addOnceListener"),e.defineEvent=function(e){return this.getListeners(e),this},e.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},e.removeListener=function(i,s){var n,e,t=this.getListenersAsObject(i);for(e in t)t.hasOwnProperty(e)&&(n=r(t[e],s),-1!==n&&t[e].splice(n,1));return this},e.off=n("removeListener"),e.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},e.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},e.manipulateListeners=function(r,t,i){var e,n,s=r?this.removeListener:this.addListener,o=r?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(e=i.length;e--;)s.call(this,t,i[e]);else for(e in t)t.hasOwnProperty(e)&&(n=t[e])&&("function"==typeof n?s.call(this,e,n):o.call(this,e,n));return this},e.removeEvent=function(e){var t,r=typeof e,n=this._getEvents();if("string"===r)delete n[e];else if(e instanceof RegExp)for(t in n)n.hasOwnProperty(t)&&e.test(t)&&delete n[t];else delete this._events;return this},e.removeAllListeners=n("removeEvent"),e.emitEvent=function(r,o){var e,i,t,s,n=this.getListenersAsObject(r);for(t in n)if(n.hasOwnProperty(t))for(i=n[t].length;i--;)e=n[t][i],e.once===!0&&this.removeListener(r,e.listener),s=e.listener.apply(this,o||[]),s===this._getOnceReturnValue()&&this.removeListener(r,e.listener);return this},e.trigger=n("emitEvent"),e.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},e.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},e._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},e._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return i.EventEmitter=s,t},"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof module&&module.exports?module.exports=t:this.EventEmitter=t}).call(this);
window.WebmakerAuthClient = function(options) {
  var self = this;

  options = options || {};

  self.endpoint = options.endpoint || 'http://webmaker-events-service.herokuapp.com';
  self.url = options.url || self.endpoint + '/auth';
  self.audience = options.audience || window.location.origin;
  self.prefix = options.prefix || 'webmaker-';
  self.seamless = options.seamless === false ? false : true;
  self.timeout = options.timeout || 10;

  self.localStorageKey = self.prefix + 'user';

  if (!window.navigator.id) {
    console.log('No persona found. Did you include include.js?');
  }

  if (!window.localStorage) {
    console.log('Local storage must be supported.');
  }

  self.utils = {
    // Encode form data for POST
    encode: function(data) {
      var result = '';
      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          result += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(data[key]);
        }
      }
      return result;
    }
  };

  self.emitter = new EventEmitter();

  self.on = function(event, cb) {
    self.emitter.addListener(event, cb);
  };

  self.off = function(event, cb) {
    self.emitter.removeListener(event, cb);
  };

  self.login = function() {
    navigator.id.request();
  };

  self.logout = function() {
    navigator.id.logout();
  };

  self.storage = {
    get: function(key) {
      var data = JSON.parse(localStorage.getItem(self.localStorageKey));
      if (key) {
        return data[key];
      } else {
        return data;
      }
    },
    set: function(data) {
      var userObj = JSON.parse(localStorage.getItem(self.localStorageKey)) || {};
      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          userObj[key] = data[key];
        }
      }
      localStorage.setItem(self.localStorageKey, JSON.stringify(userObj));
    },
    clear: function() {
      delete localStorage[self.localStorageKey];
    }
  };


  self.init = function() {

    if (self.seamless && self.storage.get()) {
      self.emitter.emitEvent('login', [self.storage.get()]);
      self.emitter.emitEvent('restored', [self.storage.get()]);
    }

    navigator.id.watch({
      loggedInUser: null,
      onlogin: function(assertion) {

        var data = {
          audience: self.audience,
          assertion: assertion
        };

        if (!assertion) {
          self.emitter.emitEvent('error', [
            'No assertion was received'
          ]);
        }

        var http = new XMLHttpRequest();
        var body = self.utils.encode({
          audience: self.audience,
          assertion: assertion
        });

        if (self.timeout) {
          var timeoutInstance = setTimeout(function() {
            self.emitter.emitEvent('error', [
              'The request for a token timed out after ' + self.timeout + ' seconds'
            ]);
          }, self.timeout * 1000);
        }

        http.open('POST', self.url, true);
        http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        http.onreadystatechange = function() {

          if (self.timeout) {
            clearTimeout(timeoutInstance);
          }

          if (http.readyState == 4 && http.status == 200) {
            var data = JSON.parse(http.responseText);
            self.storage.set(data);
            self.emitter.emitEvent('login', [data]);
            self.emitter.emitEvent('verified', [data]);
          } else if (http.readyState === 4 && http.status && ( http.status >= 400 || http.status < 200 )) {
            navigator.id.logout();
            self.emitter.emitEvent('error', [http.responseText]);
            self.storage.clear();
          } else if (http.readyState === 4) {
            self.emitter.emitEvent('error', ['Looks like ' + self.endpoint + ' is not responding...']);
          }

        };

        http.send(body);

      },
      onlogout: function() {
        self.emitter.emitEvent('logout');
        self.storage.clear();
      }
    });

  };

};
